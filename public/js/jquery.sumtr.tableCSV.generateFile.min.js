(function($) {
    $.fn.sumtr = function(options) {
        var settings = null;
        if (typeof options === "object") {
            settings = options;
        }
        settings = $.extend({}, $.fn.sumtr.defaultSettings, settings || {});
        this.each(function() {
            var s = [];
            var table = $(this);
            var bodyRows = $(this).find(settings.bodyRows);
            var summaryRows = $(this).find(settings.summaryRows);
            if (bodyRows.length == 0) {
                return;
            }
            bodyRows.each(function(index) {
                var col = 0;
                $(this).children("td").each(function() {
                    if ($(this).is(settings.sumCells)) {
                        if (s.length < col + 1) {
                            s[col] = 0;
                        }
                        var val = settings.readValue($(this));
                        s[col] = s[col] + val;
                    } else {
                        s[col] = "noCount";
                    }
                    var colspan = (parseInt($(this).attr("colspan"))) || 1;
                    col = col + colspan;
                });
            });
            summaryRows.each(function(index) {
                var col = 0;
                $(this).children("td").each(function() {
                    if (s[col] != "noCount") {
                        $(this).html("<strong>" + settings.formatValue(s[col]) + "</strong>");
                        settings.onSum($(this), s[col]);
                    }
                    var colspan = (parseInt($(this).attr("colspan"))) || 1;
                    col = col + colspan;
                });
            });
            settings.onComplete(table);
        });
    };
    $.fn.sumtr.defaultSettings = {readValue: function(e) {
            var val = Number(e.html());
            if (isNaN(val)) {
                val = 0;
            }
            return val;
        }, formatValue: function(val) {
            if (isNaN(val)) {
                val = 0;
            }
            return val;
        }, onComplete: function(e) {
        }, onSum: function(e, sum) {
            e.data("sumtr", sum);
        }, sumCells: ".sum", bodyRows: "tbody tr", summaryRows: "tr.summary", };
    $.fn.sumtrRatio = function(n, d, q) {
        function format_percent(n) {
            return roundNumber(n, 2).toString() + "%";
        }
        function roundNumber(num, dec) {
            var result = Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
            return result;
        }
        var _n = $(this).find(n).data("sumtr");
        var _d = $(this).find(d).data("sumtr");
        var _q = _d > 0 ? (_n / _d) : 0;
        $(this).find(q).html(_q > 0 ? format_percent(_q * 100) : "-");
    };
})(jQuery);
jQuery.fn.TableCSVExport = function(options) {
    var options = jQuery.extend({separator: ",", header: [], columns: [], extraHeader: "", extraData: [], insertBefore: "", delivery: "popup"}, options);
    var csvData = [];
    var headerArr = [];
    var el = this;
    var basic = options.columns.length == 0 ? true : false;
    var columnNumbers = [];
    var columnCounter = 0;
    var insertBeforeNum = null;
    var numCols = options.header.length;
    var tmpRow = [];
    if (numCols > 0) {
        if (basic) {
            for (var i = 0; i < numCols; i++) {
                if (options.header[i] == options.insertBefore) {
                    tmpRow[tmpRow.length] = options.extraHeader;
                    insertBeforeNum = i;
                }
                tmpRow[tmpRow.length] = formatData(options.header[i]);
            }
        } else {
            if (!basic) {
                for (var o = 0; o < numCols; o++) {
                    for (var i = 0; i < options.columns.length; i++) {
                        if (options.columns[i] == options.header[o]) {
                            if (options.columns[i] == options.insertBefore) {
                                tmpRow[tmpRow.length] = options.extraHeader;
                                insertBeforeNum = o;
                            }
                            tmpRow[tmpRow.length] = formatData(options.header[o]);
                            columnNumbers[columnCounter] = o;
                            columnCounter++;
                        }
                    }
                }
            }
        }
    } else {
        jQuery(el).filter(":visible").find("th").each(function() {
            if (jQuery(this).css("display") != "none") {
                tmpRow[tmpRow.length] = formatData(jQuery(this).html());
            }
        });
    }
    row2CSV(tmpRow);
    if (basic) {
        var trCounter = 0;
        jQuery(el).find("tr").each(function() {
            var tmpRow = [];
            var extraDataCounter = 0;
            jQuery(this).filter(":visible").find("td").each(function() {
                if (extraDataCounter == insertBeforeNum) {
                    tmpRow[tmpRow.length] = jQuery.trim(options.extraData[trCounter - 1]);
                }
                if (jQuery(this).css("display") != "none") {
                    if (jQuery(this).html() == "") {
                        tmpRow[tmpRow.length] = formatData("0");
                    } else {
                        if (jQuery(this).html() == " ") {
                            tmpRow[tmpRow.length] = formatData("0");
                        } else {
                            tmpRow[tmpRow.length] = jQuery.trim(formatData(jQuery(this).html()));
                        }
                    }
                }
                extraDataCounter++;
            });
            row2CSV(tmpRow);
            trCounter++;
        });
    } else {
        var trCounter = 0;
        jQuery(el).find("tr").each(function() {
            var tmpRow = [];
            var columnCounter = 0;
            var extraDataCounter = 0;
            jQuery(this).filter(":visible").find("td").each(function() {
                if ((columnCounter in columnNumbers) && (extraDataCounter == insertBeforeNum)) {
                    tmpRow[tmpRow.length] = jQuery.trim(options.extraData[trCounter - 1]);
                }
                if ((jQuery(this).css("display") != "none") && (columnCounter in columnNumbers)) {
                    tmpRow[tmpRow.length] = jQuery.trim(formatData(jQuery(this).html()));
                }
                columnCounter++;
                extraDataCounter++;
            });
            row2CSV(tmpRow);
            trCounter++;
        });
    }
    if ((options.delivery == "popup") || (options.delivery == "download")) {
        var mydata = csvData.join("\n");
        return popup(mydata);
    } else {
        var mydata = csvData.join("\n");
        return mydata;
    }
    function row2CSV(tmpRow) {
        var tmp = tmpRow.join("");
        if (tmpRow.length > 0 && tmp != "") {
            var mystr = tmpRow.join(options.separator);
            csvData[csvData.length] = jQuery.trim(mystr);
        }
    }
    function formatData(input) {
        var regexp = new RegExp(/["]/g);
        var output = input.replace(regexp, "\"\""); // Originally weird quote â€œ
        var regexp = new RegExp(/\<[^\<]+\>/g);
        var output = output.replace(regexp, "");
        if (output == "") {
            return "";
        }
        return "\"" + output + "\"";
    }
    function popup(data) {
        if (options.delivery == "download") {
            window.location = "data:text/csv;charset=utf8," + encodeURIComponent(data);
            return true;
        } else {
            var generator = window.open("", "csv", "height=400,width=600");
            generator.document.write("<html><head><title>CSV</title>");
            generator.document.write("</head><body >");
            generator.document.write('<textArea cols=70 rows=15 wrap="off" >');
            generator.document.write(data);
            generator.document.write("</textArea>");
            generator.document.write("</body></html>");
            generator.document.close();
            return true;
        }
    }}
;
(function($) {
    $.generateFile = function(options) {
        options = options || {};
        if (!options.script || !options.filename || !options.content) {
            throw new Error("Please enter all the required config options!");
        }
        var iframe = $("<iframe>", {width: 1, height: 1, frameborder: 0, css: {display: "none"}}).appendTo("body");
        var formHTML = '<form action="" method="post"><input type="hidden" name="filename" /><input type="hidden" name="content" /></form>';
        setTimeout(function() {
            var body = (iframe.prop("contentDocument") !== undefined) ? iframe.prop("contentDocument").body : iframe.prop("document").body;
            body = $(body);
            body.html(formHTML);
            var form = body.find("form");
            form.attr("action", options.script);
            form.find("input[name=filename]").val(options.filename);
            form.find("input[name=content]").val(options.content);
            form.submit();
        }, 50);
    };
})(jQuery);